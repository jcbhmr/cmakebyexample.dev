/**
 * Customize default theme styling by overriding CSS variables:
 * https://github.com/vuejs/vitepress/blob/main/src/client/theme-default/styles/vars.css
 */

/**
 * Colors
 *
 * Each colors have exact same color scale system with 3 levels of solid
 * colors with different brightness, and 1 soft color.
 *
 * - `XXX-1`: The most solid color used mainly for colored text. It must
 *   satisfy the contrast ratio against when used on top of `XXX-soft`.
 *
 * - `XXX-2`: The color used mainly for hover state of the button.
 *
 * - `XXX-3`: The color for solid background, such as bg color of the button.
 *   It must satisfy the contrast ratio with pure white (#ffffff) text on
 *   top of it.
 *
 * - `XXX-soft`: The color used for subtle background such as custom container
 *   or badges. It must satisfy the contrast ratio when putting `XXX-1` colors
 *   on top of it.
 *
 *   The soft color must be semi transparent alpha channel. This is crucial
 *   because it allows adding multiple "soft" colors on top of each other
 *   to create a accent, such as when having inline code block inside
 *   custom containers.
 *
 * - `default`: The color used purely for subtle indication without any
 *   special meanings attched to it such as bg color for menu hover state.
 *
 * - `brand`: Used for primary brand colors, such as link text, button with
 *   brand theme, etc.
 *
 * - `tip`: Used to indicate useful information. The default theme uses the
 *   brand color for this by default.
 *
 * - `warning`: Used to indicate warning to the users. Used in custom
 *   container, badges, etc.
 *
 * - `danger`: Used to show error, or dangerous message to the users. Used
 *   in custom container, badges, etc.
 * -------------------------------------------------------------------------- */

:root {
  --vp-c-default-1: var(--vp-c-gray-1);
  --vp-c-default-2: var(--vp-c-gray-2);
  --vp-c-default-3: var(--vp-c-gray-3);
  --vp-c-default-soft: var(--vp-c-gray-soft);

  --vp-c-brand-1: var(--vp-c-indigo-1);
  --vp-c-brand-2: var(--vp-c-indigo-2);
  --vp-c-brand-3: var(--vp-c-indigo-3);
  --vp-c-brand-soft: var(--vp-c-indigo-soft);

  --vp-c-tip-1: var(--vp-c-brand-1);
  --vp-c-tip-2: var(--vp-c-brand-2);
  --vp-c-tip-3: var(--vp-c-brand-3);
  --vp-c-tip-soft: var(--vp-c-brand-soft);

  --vp-c-warning-1: var(--vp-c-yellow-1);
  --vp-c-warning-2: var(--vp-c-yellow-2);
  --vp-c-warning-3: var(--vp-c-yellow-3);
  --vp-c-warning-soft: var(--vp-c-yellow-soft);

  --vp-c-danger-1: var(--vp-c-red-1);
  --vp-c-danger-2: var(--vp-c-red-2);
  --vp-c-danger-3: var(--vp-c-red-3);
  --vp-c-danger-soft: var(--vp-c-red-soft);
}

/**
 * Component: Button
 * -------------------------------------------------------------------------- */

:root {
  --vp-button-brand-border: transparent;
  --vp-button-brand-text: var(--vp-c-white);
  --vp-button-brand-bg: var(--vp-c-brand-3);
  --vp-button-brand-hover-border: transparent;
  --vp-button-brand-hover-text: var(--vp-c-white);
  --vp-button-brand-hover-bg: var(--vp-c-brand-2);
  --vp-button-brand-active-border: transparent;
  --vp-button-brand-active-text: var(--vp-c-white);
  --vp-button-brand-active-bg: var(--vp-c-brand-1);
}

/**
 * Component: Home
 * -------------------------------------------------------------------------- */

:root {
  --vp-home-hero-name-color: transparent;
  --vp-home-hero-name-background: CanvasText;

  --vp-home-hero-image-background-image: linear-gradient(
    to bottom,
    rgba(255, 255, 255, 0.2),
    rgba(255, 255, 255, 0.2)
  );
  --vp-home-hero-image-filter: blur(40px);
}

@media (min-width: 640px) {
  :root {
    --vp-home-hero-image-filter: blur(56px);
  }
}

@media (min-width: 960px) {
  :root {
    --vp-home-hero-image-filter: blur(72px);
  }
}

/**
 * Component: Custom Block
 * -------------------------------------------------------------------------- */

:root {
  --vp-custom-block-tip-border: transparent;
  --vp-custom-block-tip-text: var(--vp-c-text-1);
  --vp-custom-block-tip-bg: var(--vp-c-brand-soft);
  --vp-custom-block-tip-code-bg: var(--vp-c-brand-soft);
}

/**
 * Component: Algolia
 * -------------------------------------------------------------------------- */

.DocSearch {
  --docsearch-primary-color: var(--vp-c-brand-1) !important;
}

/**
 * Custom CSS! Yes, there's lots of '!important' because we are overriding the
 * VitePress CSS which usually uses '.VPThing[data-abc123]' selectors. In order
 * to have a higher specificity we need to use '!important'.
 * -------------------------------------------------------------------------- */

/* It's debatable whether '<details>' things should have a cursor indicator. In
   this case, I think it makes sense to have them. */
.vp-doc summary {
  margin: 0.3em 0;
  cursor: pointer;
}

/* When the screen width shrinks, VitePress will hide the navbar links inside a
   hamburger menu that is obnoxious. The hamburger menu also includes the theme
   toggle (dark/light) and the social links. This section of CSS edits the .VP*
   components enough to get rid of the hamburger menu. */
.VPFlyout {
  display: none !important;
}
.VPNavBarHamburger {
  display: none !important;
}
.VPNavBarAppearance {
  display: flex !important;
  align-items: center !important;
}
.VPNavBarSocialLinks {
  display: flex !important;
  align-items: center !important;
}
@media (max-width: 767px) {
  .VPNavBar .content-body {
    padding-right: 1em;
  }
}
@media (max-width: 397px) {
  .VPNavBarTitle .title {
    font-size: 0.8em !important;
  }
}
@media (max-width: 363px) {
  .VPNavBarTitle .title {
    font-size: 0 !important;
  }
}

/* This app doesn't have a very useful navbar. To that end, I think the navbar
   shouldn't be stickied at the top of the page. Instead, this CSS makes it so
   that the navbar behaves like a normal in-page element. */
.VPNav {
  align-self: center;
  position: unset !important;
  left: unset !important;
}
@media (min-width: 960px) {
  .VPNav {
    max-width: 688px;
  }
  .VPNavBar {
    padding: 0 8px !important;
  }
}
@media (min-width: 1440px) {
  .VPNav {
    max-width: 720px;
  }
}
.VPContent {
  padding-top: 0 !important;
}

/* Since the "ðŸ”º CMake by Example" logo is the de-facto home button, we want to
   emphasize that it's supposed to be clicked on. */
.VPNavBarTitle a {
  font-weight: 500;
  color: color-mix(in srgb, var(--vp-c-brand-1) 80%, currentColor) !important;
  text-decoration: underline;
  text-underline-offset: 2px;
  text-decoration-color: color-mix(in srgb, currentColor 20%, var(--vp-c-bg));
  transition:
    color 0.25s,
    opacity 0.25s;
}
.VPNavBarTitle a:hover {
  color: color-mix(in srgb, var(--vp-c-brand-2) 80%, currentColor) !important;
}

/* '<h1>' and friends don't have margins but '<p>' does. This means that if a
   '<p>' is the first content element on the page it has an extra top margin
   that a normal heading wouldn't. */
.vp-doc > div > p:first-child {
  margin-top: 0 !important;
}

/* With no prev/next buttons at the bottom, it makes sense to shore up the extra
   padding that is added by default to make it look better. */
.content {
  padding-bottom: 0 !important;
}
.VPDocFooter {
  margin-top: 32px !important;
}

/* By default the '<footer>' at the bottom with the copyright/license text is a
   bit too stark. This CSS will dim the text against the background and make it
   less visually relevant. */
.VPFooter {
  padding: 14px 16px 16px !important;
}
.VPFooter p {
  font-size: smaller !important;
  color: color-mix(in srgb, var(--vp-c-text-2) 60%, var(--vp-c-bg)) !important;
}

/* ...but the '<a>' tags should still be visually clickable! */
.VPFooter a {
  font-weight: 500;
  color: color-mix(in srgb, var(--vp-c-brand-1) 60%, var(--vp-c-bg));
  text-decoration: underline;
  text-underline-offset: 2px;
  transition:
    color 0.25s,
    opacity 0.25s;
}
.VPFooter a:hover {
  color: color-mix(in srgb, var(--vp-c-brand-2) 60%, var(--vp-c-bg));
}

/* Since this site is deliberately simple and small, we don't need the '#' links
   that permalink to '#my-header' on hover. */
.header-anchor {
  display: none;
}
